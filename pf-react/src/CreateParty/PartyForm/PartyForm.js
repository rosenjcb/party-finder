import React, { useState, useEffect, createRef }  from 'react';
import { Redirect, withRouter } from "react-router-dom";
import styled from 'styled-components';
import PositionForm from './PositionForm/PositionForm';
import { usePartyContext, PartyContext } from "./index.js";
import axios from 'axios';

//Refactor with form tag
function PartyForm(props) {

    const [redirect, setRedirect] = useState(null);

    const [party, setParty] = useState({
        "name" : null,
    }); 

    const handleSubmit = () => {
        console.log(party)
        axios.post('http://localhost:8080/parties/', party)
        .then(response => {
            console.log(response.data);   
            setRedirect(<Redirect to={{
                    pathname: "/parties/" + party.name + "/lobby"}}/>
                );       
        })
        .catch(error => {
            console.log(error);
        });
    }

    //Maybe make the entire input field be autogenerated from a GET? Who knows...
    const details = [
        {
            name: "Website Name",
            placeHolder : "www.yourparty.com",
            isInput: true,
            isContain: false
        },
        {
            name: "Funding Stage",
            placeHolder : "Series A",
            isInput: true,
            isContain: false
        },
        {
            name: "Et cetera",
            placeHolder : "not sure",
            isInput: true,
            isBlock: false
        }
    ]

    const socialMedia = [
        {
            name : "Discord"
        },
        {
            name : "Twitter"
        },
        {
            name : "Slack"
        },
        {
            name : "Skype"
        }
    ]

    const detailFields = details.map((detail, index) => <PartyContext.Provider key={index} value={[party, setParty]}><Input party={party} title={detail.name} placeHolder={detail.placeHolder} isInput={detail.isInput} isBlock={detail.isBlock}/></PartyContext.Provider>);

    const socialMediaFields = socialMedia.map((social, index) => <PartyContext.Provider key={index} value={[party, setParty]}><Input title ={social.name} isInput = {true} isBlock={false}/></PartyContext.Provider>);
    
    if(redirect) {
        return(redirect);
    } else {
        return(
            <PartyFormDiv>
                <GeneralInfo>
                    <Header>General Info</Header>
                    <PartyContext.Provider value = {[party, setParty]}><Input party={party} attr={"name"} title={"Party Name"} placeHolder={"What's your party's name?"} isInput={true} isBlock={true}></Input></PartyContext.Provider>
                    <PartyContext.Provider value = {[party, setParty]}><Input party={party} title={"Description"} height={"10rem"} width={"100%"} placeHolder={"Tell us about your project!"} isInput={false} isBlock={true}></Input></PartyContext.Provider>
                </GeneralInfo>
                <Details>
                    <Header>Details</Header>
                    <DetailFields>{detailFields}</DetailFields>
                    <Header>Social Media</Header>
                    <SocialMediaFields>{socialMediaFields}</SocialMediaFields>
                </Details>
                <Positions>
                    <Header>Positions</Header>
                    <PositionForm/>
                </Positions>
                <Submit onClick={handleSubmit}>Complete</Submit>
            </PartyFormDiv>
        );
    }
}


function Input(props) {

    const [party, setParty] = usePartyContext();
    const width = props.isBlock ? "100%" : "auto";

    const handleChange = e => {
        const {name, value} = e.target;
        setParty(party  => ({...party, [name]: value}));
        console.log(party);
    }

    const field = props.isInput === true ? <InputField placeHolder={props.placeHolder} width={width} name={props.attr} onChange={handleChange}/> : <TextArea height={props.height} width={props.width}/>;
    return (
        <InputDiv>
            <InputName>{props.title}</InputName>
            {field}
        </InputDiv>
    );
}

const PartyFormDiv = styled.div`
    padding: 0.5rem;  
    display: block;
    border-radius: 10px;
    background-color: #545064;
    margin: 5px;
    width: 90%;
`;

const GeneralInfo = styled.div`
    border-bottom: 2px solid #393546;
    padding: 0.5rem;
`;

const Details = styled.div`
    border-bottom: 2px solid #393546;
    padding: 0.5rem;
`;

const DetailFields = styled.div`
    display: grid;
    grid-template-columns: auto minmax(0, 1fr);
    margin: 1rem auto;
`;

const Header = styled.h1`
    font-size: 1.5rem;
    color: white;
    display: block;
    margin: 0.5rem;
    margin-left: 0;
`;

const SocialMediaFields = styled.div`
    display: grid;
    grid-template-columns: auto minmax(0, 1fr);
    margin: 1rem auto;
`;

const Positions = styled.div`
    border-bottom: 2px solid #393546;
    padding: 0.5rem;
`;

const Submit = styled.button.attrs(props => ({
    onSubmit: props.handleSubmit
}))`
    background-color: green;
    margin: 1rem;
    font-size: 1rem;
    color: white;
    border-radius: 4px;
    border: none;
    min-width: 75px;
    min-height: 50px;

    :hover {
        background-color: #90EE90;
    }

    :focus {
        outline: none;
    }
`


///Subcomponents of Inputs
const InputDiv = styled.div`
    width: ${props => props.width};
    margin: 0.5rem auto;
`;

const InputName = styled.p`
    color: white;
    font-size: 0.5 rem;
    padding: 1px;
    margin: 0;
`;

const InputField = styled.input.attrs(props => ({
    placeholder: props.placeHolder,
    type: "text",
}))`
    border-radius 7px;
    border-style: none;
    font-size: 1rem;
    width: ${props => props.width};
    vertical-align: top;
`;

const TextArea = styled.textarea.attrs(props => ({
    placeholder: props.placeHoder,
}))`
    height: ${props => props.height};
    width: ${props => props.width};
    border-style: none;
    border-radius 7px;

`;


export default withRouter(PartyForm);